#!/usr/bin/env ruby
# Lock a set of disk via the mongo lock command and snapshot them to the cloud

require 'rubygems'
require 'trollop'

$: << File.join("..", File.dirname(__FILE__), "lib")
require 'ec2_consistent_backup'
require 'ec2_volume_snapshotter'

opts = Trollop::options do
  opt :path, "Data path to freeze", :type => :string, :required => true
  opt :access_key_id, "Access Key Id for AWS", :type => :string
  opt :secret_access_key, "Secret Access Key for AWS", :type => :string
  opt :devices, "Devices to snapshot, comma separated", :type => :string, :required => true
  opt :type, "Snapshot type, to choose among #{EC2VolumeSnapshotter::KINDS.keys.join(",")}", :default => "snapshot"
  opt :limit, "Cleanup old snapshots to keep only limit snapshots", :type => :integer
  opt :addusers, "Additional user permissions to assign to snapshots", :type => :string, :default => ""
end

# find instance id by
#  - resolving name to ip
#  - looking in EC2 for server
# Lock Mongo
# Snapshot
# Unlock

aki = opts[:access_key_id]
sak = opts[:secret_access_key]
path = opts[:path]

raise "Path cannot be /" if path == '/'

def log s
  $stderr.puts "[#{Time.now}]: #{s}"
end

db = MongoHelper::DataLocker.new
db.lock
if db.locked?
  log "MongoDB oplog time is #{db.getOplogTime}"
  `sync ; sleep 5 ; sync ; sleep 5 ; sync`
  `if xfs_info #{path} > /dev/null 2>&1 ; then /usr/sbin/xfs_freeze -f #{path} ; else /sbin/fsfreeze -f #{path} ; fi`
end

begin
  snapshotter = EC2VolumeSnapshotter.new(aki, sak)
  limit = if opts[:limit] == nil
    EC2VolumeSnapshotter::KINDS[opts[:type]]
  else
    opts[:limit]
  end

  snapshotter.snapshot_devices(opts[:devices].split(/,/), "Mongo Snapshot", opts[:type], limit, {"mongo_oplogtime" => db.getOplogTime}, opts[:addusers].split(','))
rescue Exception => e
  require "pp"
  puts e.inspect  
  pp e.backtrace
ensure
  db.unlock
  `if xfs_info #{path} > /dev/null 2>&1 ; then /usr/sbin/xfs_freeze -u #{path} ; else /sbin/fsfreeze -u #{path} ; fi`
end
